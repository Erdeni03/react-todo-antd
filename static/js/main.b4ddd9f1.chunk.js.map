{"version":3,"sources":["components/TodoClassicItem.js","components/TodoClassicList.js","components/TodoDraggable.js","components/AddTodo.js","App.js","reportWebVitals.js","index.js"],"names":["TodoClassicItem","item","onDelete","onToggle","console","log","classNames","styleActive","isCompleted","push","className","join","title","CheckCircleOutlined","onClick","id","DeleteOutlined","FILTER_MAP","Все","Активные","task","Выполненные","FILTER_NAMES","Object","keys","TodoClassicList","tasks","onSort","useState","filter","setFilter","Text","Typography","filterList","map","name","aria-pressed","size","header","strong","length","SortAscendingOutlined","footer","bordered","dataSource","renderItem","TodoDraggable","columnsFromBackend","columns","setColumns","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","splice","index","removed","column","copiedItems","entries","columnId","style","width","provided","snapshot","droppableProps","ref","innerRef","background","isDraggingOver","draggableId","draggableProps","dragHandleProps","backgroundColor","isDragging","placeholder","AddTodo","onAdd","setTitle","setIsCompleted","onSubmit","e","preventDefault","trim","alert","value","onChange","target","type","htmlType","icon","PlusOutlined","App","Title","Header","Layout","Footer","Content","uuid","setTasks","useMemo","isMode","setIsMode","deleteTask","toggleIsCompleted","addSort","sort","a","b","localeCompare","level","ghost","SyncOutlined","newTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4ddd9f1.chunk.js","sourcesContent":["import {DeleteOutlined, CheckCircleOutlined} from \"@ant-design/icons\"\r\n\r\nconst TodoClassicItem = ({item, onDelete, onToggle}) => {\r\n  console.log(\"item\", item)\r\n  const classNames = []\r\n  const styleActive = []\r\n  if (item.isCompleted) {\r\n    classNames.push(\"done\")\r\n    styleActive.push(\"active\")\r\n  }\r\n\r\n  return (\r\n    <li className=\"ant-list-item\" key={item.id}>\r\n      <span className={classNames.join(\" \")}>{item.title}</span>\r\n\r\n      <div className=\"app-wrap\">\r\n        <CheckCircleOutlined\r\n          className={styleActive}\r\n          onClick={() => onToggle(item.id)}\r\n        />\r\n        <DeleteOutlined onClick={() => onDelete(item.id)} />\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default TodoClassicItem\r\n","import {useState} from \"react\"\r\nimport {List, Typography, Button} from \"antd\"\r\nimport TodoClassicItem from \"./TodoClassicItem\"\r\nimport {SortAscendingOutlined} from \"@ant-design/icons\"\r\n\r\nconst FILTER_MAP = {\r\n  Все: () => true,\r\n  Активные: task => !task.isCompleted,\r\n  Выполненные: task => task.isCompleted\r\n}\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP)\r\n\r\nconst TodoClassicList = ({tasks, onDelete, onToggle, onSort}) => {\r\n  const [filter, setFilter] = useState(\"Все\")\r\n  const {Text} = Typography\r\n\r\n  const filterList = FILTER_NAMES.map(name => {\r\n    return (\r\n      <Button aria-pressed=\"true\" key={name} onClick={() => setFilter(name)}>\r\n        {name}\r\n      </Button>\r\n    )\r\n  })\r\n  return (\r\n    <List\r\n      size=\"large\"\r\n      header={\r\n        <div className=\"app-wrap\">\r\n          <Text strong>Кол-во задач {tasks.length}</Text>\r\n          <SortAscendingOutlined onClick={() => onSort()} />\r\n        </div>\r\n      }\r\n      footer={\r\n        <>\r\n          <span className=\"mr-2\">Показать: </span>\r\n          {filterList}\r\n        </>\r\n      }\r\n      bordered\r\n      dataSource={tasks.filter(FILTER_MAP[filter])}\r\n      renderItem={item => (\r\n        <TodoClassicItem\r\n          key={item.id}\r\n          item={item}\r\n          onDelete={onDelete}\r\n          onToggle={onToggle}\r\n        />\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TodoClassicList\r\n","import React, {useState} from \"react\"\r\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\"\r\n\r\nimport {Card} from \"antd\"\r\nimport {DeleteOutlined} from \"@ant-design/icons\"\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return\r\n  const {source, destination} = result\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId]\r\n    const destColumn = columns[destination.droppableId]\r\n    const sourceItems = [...sourceColumn.items]\r\n    const destItems = [...destColumn.items]\r\n    const [removed] = sourceItems.splice(source.index, 1)\r\n    destItems.splice(destination.index, 0, removed)\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    })\r\n  } else {\r\n    const column = columns[source.droppableId]\r\n    const copiedItems = [...column.items]\r\n    const [removed] = copiedItems.splice(source.index, 1)\r\n    copiedItems.splice(destination.index, 0, removed)\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction TodoDraggable({onDelete, columnsFromBackend}) {\r\n  const [columns, setColumns] = useState(columnsFromBackend)\r\n  return (\r\n    <div className=\"app-wrap\">\r\n      <DragDropContext\r\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\r\n      >\r\n        {Object.entries(columns).map(([columnId, column], index) => {\r\n          return (\r\n            <Card\r\n              title={column.name}\r\n              //   extra={<a href=\"#\">More</a>}\r\n              style={{width: 400}}\r\n              key={columnId}\r\n            >\r\n              <Droppable droppableId={columnId} key={columnId}>\r\n                {(provided, snapshot) => {\r\n                  return (\r\n                    <div\r\n                      className=\"ant-card-body\"\r\n                      {...provided.droppableProps}\r\n                      ref={provided.innerRef}\r\n                      style={{\r\n                        background: snapshot.isDraggingOver ? \"#bae7ff\" : \"\"\r\n                      }}\r\n                    >\r\n                      {column.items.map((item, index) => {\r\n                        return (\r\n                          <Draggable\r\n                            key={item.id}\r\n                            draggableId={item.id}\r\n                            index={index}\r\n                          >\r\n                            {(provided, snapshot) => {\r\n                              return (\r\n                                <div\r\n                                  className=\"todo-drag-item\"\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                  style={{\r\n                                    backgroundColor: snapshot.isDragging\r\n                                      ? \"#263B4A\"\r\n                                      : \"\",\r\n\r\n                                    ...provided.draggableProps.style\r\n                                  }}\r\n                                >\r\n                                  {item.title}\r\n                                  <DeleteOutlined\r\n                                    onClick={() => onDelete(item.id)}\r\n                                  />\r\n                                </div>\r\n                              )\r\n                            }}\r\n                          </Draggable>\r\n                        )\r\n                      })}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )\r\n                }}\r\n              </Droppable>\r\n            </Card>\r\n          )\r\n        })}\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoDraggable\r\n","import {Input, Button} from \"antd\"\r\nimport {PlusOutlined} from \"@ant-design/icons\"\r\nimport {useState} from \"react\"\r\nconst AddTodo = ({onAdd}) => {\r\n  let [title, setTitle] = useState(\"\")\r\n  let [isCompleted, setIsCompleted] = useState(false)\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    if (!title.trim()) {\r\n      alert(\"Пожалуйста добавьте описание к задаче!\")\r\n      return\r\n    }\r\n\r\n    onAdd({title, isCompleted})\r\n\r\n    setTitle(\"\")\r\n    setIsCompleted(false)\r\n  }\r\n  return (\r\n    <form className=\"app-flex\" onSubmit={onSubmit}>\r\n      <Input\r\n        placeholder=\"Описание задачи...\"\r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)}\r\n      />\r\n\r\n      <Button\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        icon={<PlusOutlined />}\r\n        size=\"large\"\r\n      >\r\n        Добавить\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddTodo\r\n","import {useState, useMemo} from \"react\"\nimport {Typography, Layout, Button} from \"antd\"\nimport {SyncOutlined} from \"@ant-design/icons\"\nimport uuid from \"uuid/dist/v4\"\nimport TodoClassicList from \"./components/TodoClassicList\"\nimport TodoDraggable from \"./components/TodoDraggable\"\nimport AddTodo from \"./components/AddTodo\"\nfunction App() {\n  const {Title} = Typography\n  const {Header, Footer, Content} = Layout\n  const [tasks, setTasks] = useState([\n    {id: uuid(), title: \"Text5\", isCompleted: false},\n    {id: uuid(), title: \"Lorem ipsum, quisque\", isCompleted: false},\n    {id: uuid(), title: \"Lorem ipsum\", isCompleted: false},\n    {id: uuid(), title: \"Text3 Text3 Text3\", isCompleted: false},\n    {id: uuid(), title: \"Text4\", isCompleted: false}\n  ])\n  const columnsFromBackend = useMemo(\n    () => ({\n      [uuid()]: {\n        name: \"Active\",\n        items: tasks\n      },\n      [uuid()]: {\n        name: \"Completed\",\n        items: []\n      }\n    }),\n    [tasks]\n  )\n  let [isMode, setIsMode] = useState(true)\n\n  // Удаление задачи\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id))\n  }\n\n  // Проверка на выполнение задачи\n  const toggleIsCompleted = id => {\n    setTasks(\n      tasks.map(task => {\n        if (task.id === id) {\n          task.isCompleted = !task.isCompleted\n        }\n        return task\n      })\n    )\n  }\n\n  // Добавление задачи\n  const addTask = task => {\n    const id = uuid()\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])\n  }\n\n  // Сортировка задач\n  const addSort = () => {\n    setTasks([...tasks].sort((a, b) => a.title.localeCompare(b.title)))\n  }\n\n  return (\n    <Layout>\n      <Header>\n        <Title>TO-DO</Title>\n        <Title level={2}>\n          Mode:{\" \"}\n          <Button\n            ghost\n            className={isMode ? \"app-btn-classic\" : \"app-btn-drag\"}\n            onClick={() => setIsMode((isMode = !isMode))}\n          >\n            {isMode ? \"CLASSIC\" : \"DRAGGABLE\"}\n            <SyncOutlined className={isMode ? \"mode\" : \"not-mode\"} />\n          </Button>\n        </Title>\n      </Header>\n      <Content>\n        <div className=\"app-background\"></div>\n        <AddTodo onAdd={addTask} />\n        {isMode ? (\n          <TodoClassicList\n            tasks={tasks}\n            onDelete={deleteTask}\n            onToggle={toggleIsCompleted}\n            onSort={addSort}\n          />\n        ) : (\n          <TodoDraggable\n            columnsFromBackend={columnsFromBackend}\n            onDelete={deleteTask}\n            onToggle={toggleIsCompleted}\n            onSort={addSort}\n          />\n        )}\n      </Content>\n      <Footer>\n        <Title level={2}>LIST</Title>\n      </Footer>\n    </Layout>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}